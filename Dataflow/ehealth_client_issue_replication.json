{"dataflow":{"dfKey":"587d164d-a292-4156-902e-238906d5f479","name":"ehealth_client_issue_replication","tags":"","description":"VS plan_pharmacy_network","definition":"{\"name\":\"ehealth_client_issue_replication\",\"description\":\"VS plan_pharmacy_network\",\"version\":0,\"parameters\":\"[{\\\"name\\\":\\\"limit_rows\\\",\\\"defValueInInteractiveMode\\\":\\\"limit 1000\\\",\\\"defValueInBatchMode\\\":\\\"limit 10\\\"}]\",\"livyServerId\":0,\"components\":[{\"udfNames\":[],\"componentId\":0,\"componentName\":\"startComponent\",\"category\":\"Start\",\"componentType\":\"UDF\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":0,\"dependencies\":[],\"className\":\"com.datagaps.dataflow.models.UDFComponent\",\"excludeNotification\":\"N\"},{\"code\":\"import com.datagaps.core.engine.utils.CodeUtils;\\r\\nimport org.apache.hadoop.fs._;\\r\\nimport scala.collection.mutable.ListBuffer;\\r\\nimport org.apache.spark.sql.types._;\\r\\n\\r\\n// path format is s3a://bucketName/path\\r\\n// var path \\u003d \\\"s3a://ehth-eng-catalog-dl-cm/mcratedb-qa-plannetwork/ps_cm/2022/plan_pharmacy_network/*\\\" ;\\r\\nvar path \\u003d \\\"s3a://data/2022/plan_pharmacy_network/*\\\"\\r\\nval customSchema \\u003d StructType(Array(\\r\\n  StructField(\\\"plan_id\\\", StringType, true),\\r\\n  StructField(\\\"provider_id\\\", StringType, true),\\r\\n  StructField(\\\"type\\\", StringType, true),\\r\\n  StructField(\\\"ingestion\\\", StringType, true),\\r\\n  StructField(\\\"batch_number\\\", StringType, true),\\r\\n  StructField(\\\"source\\\", StringType, true))\\r\\n)\\r\\nval df \\u003d spark.read.format(\\\"csv\\\").schema(customSchema).load(path)\\r\\ndf.createOrReplaceTempView(\\\"postgre\\\")\\r\\ndf.count()\\r\\ndf.show()\",\"kind\":\"spark\",\"dataSourceId\":0,\"componentId\":31,\"componentName\":\"postgre\",\"description\":\"\",\"tableName\":\"postgre\",\"category\":\"Processor\",\"componentType\":\"Code\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":10,\"dependencies\":[41],\"mode\":\"always\",\"options\":{},\"className\":\"com.datagaps.dataflow.models.CodeComponent\",\"excludeNotification\":\"N\"},{\"code\":\"import com.datagaps.core.engine.utils.CodeUtils;\\r\\nimport org.apache.hadoop.fs._;\\r\\nimport scala.collection.mutable.ListBuffer;\\r\\nimport org.apache.spark.sql.types._;\\r\\n\\r\\n\\r\\n// path format is s3a://bucketName/path\\r\\nvar path \\u003d \\\"s3a://data/mcratedb-dump/qa/2022/plan_pharmacy_eligibility/*\\\" ;\\r\\nval customSchema \\u003d StructType(Array(\\r\\n  StructField(\\\"plan_year\\\", StringType, true),\\r\\n  StructField(\\\"plan_id\\\", StringType, true),\\r\\n  StructField(\\\"pharmacy_id\\\", StringType, true),\\r\\n  StructField(\\\"pharmacy_retail_preferred_ind\\\", StringType, true),\\r\\n  StructField(\\\"pharmacy_retail_ind\\\", StringType, true),\\r\\n  StructField(\\\"pharmacy_mail_order_ind\\\", StringType, true),\\r\\n  StructField(\\\"updated_by\\\", StringType, true),\\r\\n  StructField(\\\"updated_when\\\", StringType, true))\\r\\n)\\r\\nval df \\u003d spark.read.option(\\\"delimiter\\\", \\\"|\\\").format(\\\"csv\\\").schema(customSchema).load(path)\\r\\ndf.createOrReplaceTempView(\\\"mcrate\\\")\\r\\ndf.count()\\r\\ndf.show()\",\"kind\":\"spark\",\"dataSourceId\":0,\"componentId\":39,\"componentName\":\"mcrate\",\"description\":\"\",\"tableName\":\"\",\"category\":\"Processor\",\"componentType\":\"Code\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":10,\"dependencies\":[41],\"mode\":\"always\",\"options\":{},\"className\":\"com.datagaps.dataflow.models.CodeComponent\",\"excludeNotification\":\"N\"},{\"code\":\"import com.datagaps.core.engine.utils.CodeUtils;\\r\\nimport org.apache.hadoop.fs._;\\r\\nimport scala.collection.mutable.ListBuffer;\\r\\nimport org.apache.hadoop.conf.Configuration\\r\\n\\r\\n// path format is s3a://bucketName/path\\r\\nvar path \\u003d \\\"s3a://data/out/2022/planJson/\\\"\\r\\nval src \\u003d new Path(path)\\r\\nval fs \\u003d src.getFileSystem(new Configuration())\\r\\nval file \\u003d fs.listStatus(new Path(path))\\r\\nval listFiles \\u003d file.toList\\r\\nvar fileList\\u003d new ListBuffer[String]()\\r\\nvar fileNumberList\\u003d new ListBuffer[Int]()\\r\\nvar latestfolder \\u003d \\\"\\\"\\r\\nfor(list \\u003c- listFiles)\\r\\n{\\r\\n  fileList +\\u003d list.getPath.toString\\r\\n  var folder \\u003d list.getPath.toString\\r\\n  val fileNumber \\u003dfolder.substring(folder.lastIndexOf(\\\" \\\")+1,folder.length); // our folder in S3 should have space and number follows like version 1, version 2, version 3...\\r\\n  fileNumberList +\\u003dfileNumber.toInt\\r\\n }\\r\\n val maxNumber \\u003d fileNumberList.max\\r\\n for(list \\u003c- listFiles)\\r\\n{\\r\\n    var folder \\u003dlist.getPath.toString\\r\\n    val fileNumber \\u003dfolder.substring(folder.lastIndexOf(\\\" \\\")+1,folder.length);\\r\\n    if(fileNumber.toInt \\u003d\\u003d maxNumber)\\r\\n        latestfolder \\u003d folder    \\r\\n}\\r\\nlatestfolder \\u003d latestfolder + \\\"/*\\\"\\r\\nval df \\u003d spark.read.json(latestfolder)\\r\\ndf.cache()\\r\\nprintln(\\\"\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\u003d\\\")\\r\\nprintln(latestfolder)\\r\\n\\r\\n// val df \\u003d spark.read.json(path)\\r\\n//here final dataset is date set name we want to create  \\r\\ndf.createOrReplaceTempView(\\\"plan_mapping_data\\\")\\r\\ndf.count()\\r\\ndf.show()\",\"kind\":\"spark\",\"dataSourceId\":0,\"componentId\":7,\"componentName\":\"plan_mapping\",\"description\":\"\",\"tableName\":\"\",\"category\":\"Processor\",\"componentType\":\"Code\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":10,\"dependencies\":[40],\"mode\":\"always\",\"options\":{},\"className\":\"com.datagaps.dataflow.models.CodeComponent\",\"excludeNotification\":\"N\"},{\"code\":\"import com.datagaps.core.engine.utils.CodeUtils;\\r\\nimport org.apache.hadoop.fs._;\\r\\nimport scala.collection.mutable.ListBuffer;\\r\\nimport org.apache.hadoop.conf.Configuration\\r\\nimport org.apache.spark.sql.types._;\\r\\nimport org.apache.spark.sql.types.StructField\\r\\n\\r\\n//\\u003cdata source name\\u003e : create a data source for AWS s3.\\r\\n// var conf \\u003dCodeUtils.configureS3(spark,\\\"pharmacy_mapping_cm\\\");\\r\\n\\r\\n\\r\\n// path format is s3a://bucketName/path\\r\\n// var path \\u003d \\\"s3a://ehth-eng-catalog-dl-cm/out/Pharmacy/\\\" ;\\r\\nvar path \\u003d \\\"s3a://data/out/2022/Pharmacy/\\\" ;\\r\\nval src \\u003d new Path(path)\\r\\nval fs \\u003d src.getFileSystem(new Configuration())\\r\\nval file \\u003d fs.listStatus(new Path(path))\\r\\nval listFiles \\u003d file.toList\\r\\nvar fileList\\u003d new ListBuffer[String]()\\r\\nvar fileNumberList\\u003d new ListBuffer[Int]()\\r\\nvar latestfolder \\u003d \\\"\\\"\\r\\nfor(list \\u003c- listFiles)\\r\\n{\\r\\n  println(list.getPath)  \\r\\n  fileList +\\u003d list.getPath.toString\\r\\n  var folder \\u003d list.getPath.toString\\r\\n   val fileNumber \\u003dfolder.substring(folder.lastIndexOf(\\\" \\\")+1,folder.length); // our folder in S3 should have space and number follows like version 1, version 2, version 3...\\r\\n   fileNumberList +\\u003dfileNumber.toInt\\r\\n }\\r\\n val maxNumber \\u003d fileNumberList.max\\r\\n for(list \\u003c- listFiles)\\r\\n{\\r\\n    var folder \\u003d list.getPath.toString\\r\\n    val fileNumber \\u003dfolder.substring(folder.lastIndexOf(\\\" \\\")+1,folder.length);\\r\\n    if(fileNumber.toInt \\u003d\\u003d maxNumber)\\r\\n        latestfolder \\u003d folder    \\r\\n}\\r\\nlatestfolder \\u003d latestfolder + \\\"/uuid_npi_mapping/*\\\"\\r\\nprintln(latestfolder)\\r\\nval customSchema \\u003d StructType(Array(\\r\\n  StructField(\\\"provider_id\\\", StringType, true),\\r\\n  StructField(\\\"pharmacy_id\\\", StringType, true))\\r\\n)\\r\\nval df \\u003d spark.read.format(\\\"csv\\\").schema(customSchema).load(latestfolder)\\r\\n// val df \\u003d spark.read.format(\\\"csv\\\").load(latestfolder)\\r\\ndf.createOrReplaceTempView(\\\"pharmacy_mapping_data\\\")\",\"kind\":\"spark\",\"dataSourceId\":0,\"componentId\":19,\"componentName\":\"pharmacy_mapping\",\"description\":\"\",\"tableName\":\"\",\"category\":\"Processor\",\"componentType\":\"Code\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":10,\"dependencies\":[40],\"mode\":\"always\",\"options\":{},\"className\":\"com.datagaps.dataflow.models.CodeComponent\",\"excludeNotification\":\"N\"},{\"partitionOptions\":{\"partitionType\":\"\",\"name\":\"\"},\"componentId\":18,\"componentName\":\"mappedMcrate\",\"description\":\"\",\"tableName\":\"mappedMcrate\",\"category\":\"Processor\",\"componentType\":\"SQL\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":10,\"dependencies\":[39,7,19],\"mode\":\"always\",\"options\":{\"dbTable\":\"-- select \\n-- m.plan_id as mcws_plan_id,\\n-- m.pharmacy_id as pharmacy_id,\\n-- split(\\n-- (case\\n--     when m.pharmacy_retail_preferred_ind\\u003d\\u0027Y\\u0027 and m.pharmacy_retail_ind\\u003d\\u0027Y\\u0027 and m.pharmacy_mail_order_ind\\u003d\\u0027Y\\u0027 then \\u0027MAIL,PREFERRED_RETAIL,RETAIL\\u0027\\n--     when m.pharmacy_retail_preferred_ind\\u003d\\u0027Y\\u0027 and m.pharmacy_retail_ind\\u003d\\u0027N\\u0027 and m.pharmacy_mail_order_ind\\u003d\\u0027Y\\u0027 then \\u0027MAIL,PREFERRED_RETAIL\\u0027\\n--     when m.pharmacy_retail_preferred_ind\\u003d\\u0027Y\\u0027 and m.pharmacy_retail_ind\\u003d\\u0027N\\u0027 and m.pharmacy_mail_order_ind\\u003d\\u0027N\\u0027 then \\u0027PREFERRED_RETAIL\\u0027\\n--     when m.pharmacy_retail_preferred_ind\\u003d\\u0027Y\\u0027 and m.pharmacy_retail_ind\\u003d\\u0027Y\\u0027 and m.pharmacy_mail_order_ind\\u003d\\u0027N\\u0027 then \\u0027PREFERRED_RETAIL,RETAIL\\u0027\\n--     when m.pharmacy_retail_preferred_ind\\u003d\\u0027N\\u0027 and m.pharmacy_retail_ind\\u003d\\u0027Y\\u0027 and m.pharmacy_mail_order_ind\\u003d\\u0027Y\\u0027 then \\u0027MAIL,RETAIL\\u0027\\n--     when m.pharmacy_retail_preferred_ind\\u003d\\u0027N\\u0027 and m.pharmacy_retail_ind\\u003d\\u0027Y\\u0027 and m.pharmacy_mail_order_ind\\u003d\\u0027N\\u0027 then \\u0027RETAIL\\u0027\\n--     when m.pharmacy_retail_preferred_ind\\u003d\\u0027N\\u0027 and m.pharmacy_retail_ind\\u003d\\u0027N\\u0027 and m.pharmacy_mail_order_ind\\u003d\\u0027Y\\u0027 then \\u0027MAIL\\u0027\\n--     when m.pharmacy_retail_preferred_ind\\u003d\\u0027N\\u0027 and m.pharmacy_retail_ind\\u003d\\u0027N\\u0027 and m.pharmacy_mail_order_ind\\u003d\\u0027N\\u0027 then \\u0027\\u0027\\n--     else \\u0027\\u0027\\n-- end),\\u0027,\\u0027) as type,\\n-- case\\n--     when pm.provider_id is null then concat(\\u0027no_providerId_in_mapping_pharmacyId_is\\u0027,m.pharmacy_id)\\n--     else pm.provider_id\\n-- end as provider_id,\\n-- case \\n--     when pmd.plan_id is null then concat(\\u0027no_planUuid_in_mapping_mcwsPlanId_is\\u0027,m.plan_id)\\n--     else pmd.plan_id\\n-- end as plan_id\\n-- from mcrate m \\n-- left join pharmacy_mapping_data pm on pm.pharmacy_id\\u003dm.pharmacy_id \\n-- left join plan_mapping_data pmd on pmd.mcws_plan_id\\u003dm.plan_id;\\nselect \\nm.plan_id as mcws_plan_id,\\nm.pharmacy_id as pharmacy_id,\\n\\u0027PREFERRED_RETAIL\\u0027 as type,\\ncase\\n    when pm.provider_id is null then concat(\\u0027no_providerId_in_mapping_pharmacyId_is\\u0027,m.pharmacy_id)\\n    else pm.provider_id\\nend as provider_id,\\ncase \\n    when pmd.plan_id is null then concat(\\u0027no_planUuid_in_mapping_mcwsPlanId_is\\u0027,m.plan_id)\\n    else pmd.plan_id\\nend as plan_id\\nfrom mcrate m \\nleft join pharmacy_mapping_data pm on pm.pharmacy_id\\u003dm.pharmacy_id \\nleft join plan_mapping_data pmd on pmd.mcws_plan_id\\u003dm.plan_id\\nwhere m.pharmacy_retail_preferred_ind\\u003d\\u0027Y\\u0027 and pm.provider_id is not null and pmd.plan_id is not null\\nunion\\nselect \\nm.plan_id as mcws_plan_id,\\nm.pharmacy_id as pharmacy_id,\\n\\u0027RETAIL\\u0027 as type,\\ncase\\n    when pm.provider_id is null then concat(\\u0027no_providerId_in_mapping_pharmacyId_is\\u0027,m.pharmacy_id)\\n    else pm.provider_id\\nend as provider_id,\\ncase \\n    when pmd.plan_id is null then concat(\\u0027no_planUuid_in_mapping_mcwsPlanId_is\\u0027,m.plan_id)\\n    else pmd.plan_id\\nend as plan_id\\nfrom mcrate m \\nleft join pharmacy_mapping_data pm on pm.pharmacy_id\\u003dm.pharmacy_id \\nleft join plan_mapping_data pmd on pmd.mcws_plan_id\\u003dm.plan_id\\nwhere m.pharmacy_retail_ind\\u003d\\u0027Y\\u0027 and pm.provider_id is not null and pmd.plan_id is not null\\nunion\\nselect \\nm.plan_id as mcws_plan_id,\\nm.pharmacy_id as pharmacy_id,\\n\\u0027MAIL\\u0027 as type,\\ncase\\n    when pm.provider_id is null then concat(\\u0027no_providerId_in_mapping_pharmacyId_is\\u0027,m.pharmacy_id)\\n    else pm.provider_id\\nend as provider_id,\\ncase \\n    when pmd.plan_id is null then concat(\\u0027no_planUuid_in_mapping_mcwsPlanId_is\\u0027,m.plan_id)\\n    else pmd.plan_id\\nend as plan_id\\nfrom mcrate m \\nleft join pharmacy_mapping_data pm on pm.pharmacy_id\\u003dm.pharmacy_id \\nleft join plan_mapping_data pmd on pmd.mcws_plan_id\\u003dm.plan_id\\nwhere m.pharmacy_mail_order_ind\\u003d\\u0027Y\\u0027 and pm.provider_id is not null and pmd.plan_id is not null;\"},\"className\":\"com.datagaps.dataflow.models.SQLComponent\",\"isCheckpointEnabled\":\"N\",\"excludeNotification\":\"N\"},{\"sourceDataFrame\":\"mappedMcrate\",\"targetDataFrame\":\"postgre\",\"mapping\":[{\"sourceColumn\":\"type\",\"sourceType\":\"string\",\"targetColumn\":\"type\",\"targetType\":\"string\",\"unique\":\"Y\",\"sourceDataFormat\":\"\",\"targetDataFormat\":\"\",\"sourceTypeChange\":\"N\",\"targetTypeChange\":\"N\"},{\"sourceColumn\":\"provider_id\",\"sourceType\":\"string\",\"targetColumn\":\"provider_id\",\"targetType\":\"string\",\"unique\":\"Y\",\"sourceDataFormat\":\"\",\"targetDataFormat\":\"\",\"sourceTypeChange\":\"N\",\"targetTypeChange\":\"N\"},{\"sourceColumn\":\"plan_id\",\"sourceType\":\"string\",\"targetColumn\":\"plan_id\",\"targetType\":\"string\",\"unique\":\"Y\",\"sourceDataFormat\":\"\",\"targetDataFormat\":\"\",\"sourceTypeChange\":\"N\",\"targetTypeChange\":\"N\"}],\"onlyInA\":\"Y\",\"onlyInB\":\"Y\",\"difference\":\"Y\",\"enableTrim\":\"N\",\"replaceNull\":\"N\",\"subDataFrames\":[{\"subDataFrameName\":\"_Source_Duplicate\",\"type\":\"Duplicates In A\"},{\"subDataFrameName\":\"_Target_Duplicate\",\"type\":\"Duplicates In B\"},{\"subDataFrameName\":\"_Matched\",\"type\":\"Matched\"},{\"subDataFrameName\":\"_OnlySource\",\"type\":\"Only In A\"},{\"subDataFrameName\":\"_OnlyTarget\",\"type\":\"Only In B\"},{\"subDataFrameName\":\"_Difference\",\"type\":\"Difference\"}],\"componentId\":5,\"componentName\":\"compare\",\"description\":\"\",\"tableName\":\"compare\",\"category\":\"Data Quality\",\"componentType\":\"Data Compare\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":10,\"dependencies\":[18,31],\"mode\":\"always\",\"options\":{},\"className\":\"com.datagaps.dataflow.models.DataCompareComponent\",\"isCheckpointEnabled\":\"N\",\"excludeNotification\":\"N\"},{\"dataframes\":[{\"dataframeId\":2,\"dataframe\":\"compare_OnlyTarget\",\"sourceDataFrame\":\"compare_OnlyTarget\",\"targetDataSourceId\":18,\"writeOptions\":{\"delimiter\":\",\",\"header\":\"true\"},\"name\":\"plan_pharmacy_eligibility\",\"targetType\":\"File\",\"format\":\"CSV\",\"isChecked\":true,\"runId\":18807,\"columns\":[],\"partitionOptions\":{\"partitionType\":\"\",\"name\":\"\"},\"subfolderType\":\"Static\",\"subfolderName\":\"ppe_only_p\",\"nameOption\":\"\",\"sqlExpression\":\"\",\"saveMode\":\"overwrite\"}],\"componentId\":25,\"componentName\":\"export_only_p\",\"description\":\"\",\"tableName\":\"Target_25\",\"category\":\"Start\",\"componentType\":\"Target\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":10,\"dependencies\":[5],\"className\":\"com.datagaps.dataflow.models.SyncComponent\",\"excludeNotification\":\"N\"},{\"partitionOptions\":{\"partitionType\":\"\",\"name\":\"\"},\"componentId\":32,\"componentName\":\"duplicate_in_only_m\",\"description\":\"\",\"tableName\":\"duplicate_in_only_m\",\"category\":\"Processor\",\"componentType\":\"SQL\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":10,\"dependencies\":[5],\"mode\":\"always\",\"options\":{\"dbTable\":\"select * from compare_OnlySource cos where concat(cos.plan_id,cos.provider_id) in (select concat(csd.plan_id,csd.provider_id) from compare_Source_Duplicate csd) and cos.provider_id not like \\u0027no%\\u0027 and cos.plan_id not like \\u0027no%\\u0027;\"},\"className\":\"com.datagaps.dataflow.models.SQLComponent\",\"isCheckpointEnabled\":\"N\",\"excludeNotification\":\"N\"},{\"partitionOptions\":{\"partitionType\":\"\",\"name\":\"\"},\"componentId\":33,\"componentName\":\"only_in_m\",\"description\":\"\",\"tableName\":\"only_in_m\",\"category\":\"Processor\",\"componentType\":\"SQL\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":10,\"dependencies\":[32],\"mode\":\"always\",\"options\":{\"dbTable\":\"SELECT \\n  cos.*\\nFROM \\n  compare_OnlySource cos\\n    LEFT JOIN duplicate_in_only_m dio ON concat(cos.plan_id,cos.provider_id) \\u003d concat(dio.plan_id,dio.provider_id)\\nWHERE\\n  concat(dio.plan_id,dio.provider_id) IS NULL\\n  and cos.provider_id not like \\u0027no%\\u0027 and cos.plan_id not like \\u0027no%\\u0027;\"},\"className\":\"com.datagaps.dataflow.models.SQLComponent\",\"isCheckpointEnabled\":\"N\",\"excludeNotification\":\"N\"},{\"format\":\"CSV\",\"enableSchema\":\"N\",\"schema\":[],\"fileMetadata\":[],\"enableTrim\":\"N\",\"componentId\":40,\"componentName\":\"qa_auth\",\"description\":\"\",\"tableName\":\"qa_auth\",\"category\":\"Source\",\"componentType\":\"File\",\"rank\":0,\"dataSourceName\":\"CSV\",\"displayRows\":10,\"dependencies\":[],\"mode\":\"always\",\"options\":{\"delimiter\":\",\",\"header\":\"false\",\"inferSchema\":\"true\",\"path\":\"actor_automationfile.CSV\"},\"className\":\"com.datagaps.dataflow.models.FileComponent\",\"isCheckpointEnabled\":\"N\",\"excludeNotification\":\"N\"},{\"format\":\"CSV\",\"enableSchema\":\"N\",\"schema\":[],\"fileMetadata\":[],\"enableTrim\":\"N\",\"componentId\":41,\"componentName\":\"cm_auth\",\"description\":\"\",\"tableName\":\"cm_auth\",\"category\":\"Source\",\"componentType\":\"File\",\"rank\":0,\"dataSourceName\":\"CSV\",\"displayRows\":10,\"dependencies\":[],\"mode\":\"always\",\"options\":{\"delimiter\":\",\",\"header\":\"false\",\"inferSchema\":\"true\",\"path\":\"actor_automationfile.CSV\"},\"className\":\"com.datagaps.dataflow.models.FileComponent\",\"isCheckpointEnabled\":\"N\",\"excludeNotification\":\"N\"}],\"isDeleteWorkSchemaTable\":\"N\"}","parameters":"[{\"name\":\"limit_rows\",\"defValueInInteractiveMode\":\"limit 1000\",\"defValueInBatchMode\":\"limit 10\"}]","version":3,"maxComponentId":41,"livyOptions":"{\"kind\":\"spark\",\"proxyUser\":\"\",\"jars\":[],\"pyFiles\":[],\"files\":[],\"driverMemory\":\"\",\"driverCores\":0,\"executorMemory\":\"\",\"executorCores\":0,\"numExecutors\":0,\"archives\":[],\"queue\":\"\",\"name\":\"\",\"conf\":{},\"heartbeatTimeoutInSecond\":0}","isDeleted":"N","userName":null,"type":"dataflow","environmentName":null,"folderPath":"Dataflow","workSchemaName":null},"analysis":[],"datamodels":[],"tagDetails":[],"dataCompares":[]}
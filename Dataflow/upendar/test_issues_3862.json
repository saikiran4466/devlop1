{"dataflow":{"dfKey":"482cd891-670c-4601-bbf4-ac0774935424","name":"test_issues_3862","tags":null,"description":"Â ","definition":"{\"name\":\"test_issues_3862\",\"description\":\"Â \",\"version\":0,\"livyServerId\":0,\"engineVariableName\":\"\",\"components\":[{\"udfNames\":[],\"componentId\":0,\"componentName\":\"startComponent\",\"tableName\":\"\",\"category\":\"Start\",\"componentType\":\"UDF\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":0,\"dependencies\":[],\"className\":\"com.datagaps.dataflow.models.UDFComponent\",\"excludeNotification\":\"N\"},{\"url\":\"http://openlibrary.org/api/volumes/brief/isbn/9780525440987.json\",\"requestType\":\"GET\",\"headers\":[{\"key\":\"Accept\",\"value\":\"*/*\"},{\"key\":\"Accept-Encoding\",\"value\":\"gzip, deflate, br\"},{\"key\":\"Content-Type\",\"value\":\"application/json\"}],\"authorization\":{\"type\":\"No Auth\"},\"body\":\"\",\"params\":[],\"preRequestScript\":\"\",\"baseUrl\":\"http://openlibrary.org\",\"endPoint\":\"/api/volumes/brief/isbn/9780525440987.json\",\"componentId\":2,\"componentName\":\"API 2\",\"tableName\":\"API_2\",\"category\":\"Source\",\"componentType\":\"API\",\"rank\":0,\"dataSourceName\":\"API_i416_upendar\",\"displayRows\":50,\"dependencies\":[],\"options\":{},\"className\":\"com.datagaps.dataflow.models.APIComponent\",\"dataSourceLogicalName\":\"\",\"excludeNotification\":\"N\"},{\"workSheets\":[{\"name\":\"Sheet 1\",\"datasetName\":\"Sheet_1\"}],\"reportViewPath\":\"EMPTYWORKBOOK/Sheet1\",\"filters\":[],\"parameters\":[],\"viewType\":\"worksheet\",\"viewTitle\":\"Workbook: EMPTY WORKBOOK\",\"componentId\":3,\"componentName\":\"BI_I667\",\"tableName\":\"\",\"category\":\"Source\",\"componentType\":\"BI\",\"rank\":0,\"dataSourceName\":\"tabluea2\",\"displayRows\":50,\"dependencies\":[],\"className\":\"com.datagaps.dataflow.models.BIComponent\",\"isCheckpointEnabled\":\"N\",\"dataSourceLogicalName\":\"\",\"excludeNotification\":\"N\"},{\"workSheets\":[{\"name\":\"Obesity Scatter Plot\",\"datasetName\":\"Obesity_Scatter_Plot\"},{\"name\":\"Obesity Map\",\"datasetName\":\"Obesity_Map\"}],\"reportViewPath\":\"Regional_16578700410810/Obesity\",\"filters\":[],\"parameters\":[],\"viewType\":\"dashboard\",\"viewTitle\":\"Workbook: Regional\",\"componentId\":4,\"componentName\":\"BI 4\",\"tableName\":\"\",\"category\":\"Source\",\"componentType\":\"BI\",\"rank\":0,\"dataSourceName\":\"tabluea2\",\"displayRows\":50,\"dependencies\":[],\"className\":\"com.datagaps.dataflow.models.BIComponent\",\"isCheckpointEnabled\":\"N\",\"dataSourceLogicalName\":\"\",\"excludeNotification\":\"N\"},{\"workSheets\":[{\"name\":\"Table\",\"datasetName\":\"Table\"},{\"name\":\"City Sales\",\"datasetName\":\"City_Sales\"},{\"name\":\"Subcategory sales\",\"datasetName\":\"Subcategory_sales\"},{\"name\":\"Profit Vs Quantity\",\"datasetName\":\"Profit_Vs_Quantity\"},{\"name\":\"Products Returned\",\"datasetName\":\"Products_Returned\"},{\"name\":\"Quantity\",\"datasetName\":\"Quantity\"},{\"name\":\"Sales\",\"datasetName\":\"Sales\"},{\"name\":\"profit\",\"datasetName\":\"profit\"},{\"name\":\"Orders\",\"datasetName\":\"Orders\"},{\"name\":\"Discount\",\"datasetName\":\"Discount\"},{\"name\":\"Returns\",\"datasetName\":\"Returns\"},{\"name\":\"Profit Ratio\",\"datasetName\":\"Profit_Ratio\"},{\"name\":\"Max Sales(City)\",\"datasetName\":\"Max_Sales_City_\"},{\"name\":\"Max Sales (State)\",\"datasetName\":\"Max_Sales__State_\"},{\"name\":\"AVG Sales per Order\",\"datasetName\":\"AVG_Sales_per_Order\"},{\"name\":\"Sales -SC\",\"datasetName\":\"Sales__SC\"},{\"name\":\"Most Used Ship Mode\",\"datasetName\":\"Most_Used_Ship_Mode\"},{\"name\":\"Shipmode\",\"datasetName\":\"Shipmode\"},{\"name\":\"Profit Vs Sales\",\"datasetName\":\"Profit_Vs_Sales\"}],\"reportViewPath\":\"StoreReports-Test16_16563943565830/StoreMetrics\",\"filters\":[],\"parameters\":[],\"viewType\":\"dashboard\",\"viewTitle\":\"Workbook: Store Reports - Test16\",\"componentId\":5,\"componentName\":\"BI_I669\",\"tableName\":\"\",\"category\":\"Source\",\"componentType\":\"BI\",\"rank\":0,\"dataSourceName\":\"tabluea2\",\"displayRows\":50,\"dependencies\":[],\"className\":\"com.datagaps.dataflow.models.BIComponent\",\"isCheckpointEnabled\":\"N\",\"dataSourceLogicalName\":\"\",\"excludeNotification\":\"N\"},{\"workSheets\":[{\"name\":\"nulldatacolumn_withouheaders -copy2\",\"datasetName\":\"nulldatacolumn_withouheaders__copy2\"}],\"reportViewPath\":\"Project_QAM_WB/nulldatacolumn_withouheaders-copy2\",\"filters\":[],\"parameters\":[],\"viewType\":\"worksheet\",\"viewTitle\":\"Workbook: Project_QAM_WB\",\"componentId\":6,\"componentName\":\"BI_I697\",\"tableName\":\"\",\"category\":\"Source\",\"componentType\":\"BI\",\"rank\":0,\"dataSourceName\":\"tabluea2\",\"displayRows\":50,\"dependencies\":[],\"className\":\"com.datagaps.dataflow.models.BIComponent\",\"isCheckpointEnabled\":\"N\",\"dataSourceLogicalName\":\"\",\"excludeNotification\":\"N\"},{\"workSheets\":[{\"name\":\"S\\u0026P Returns by Decade\",\"datasetName\":\"S_P_Returns_by_Decade\"}],\"reportViewPath\":\"Regional/Economy\",\"filters\":[],\"parameters\":[],\"viewType\":\"dashboard\",\"viewTitle\":\"Workbook: Regional\",\"componentId\":7,\"componentName\":\"BI_I754\",\"tableName\":\"\",\"category\":\"Source\",\"componentType\":\"BI\",\"rank\":0,\"dataSourceName\":\"upendar_tableau_dgvm95\",\"displayRows\":50,\"dependencies\":[],\"className\":\"com.datagaps.dataflow.models.BIComponent\",\"isCheckpointEnabled\":\"N\",\"dataSourceLogicalName\":\"\",\"excludeNotification\":\"N\"},{\"code\":\"import datetime\\r\\nimport json\\r\\nimport os\\r\\nimport re\\r\\n# import time\\r\\nimport time\\r\\nimport traceback\\r\\nimport uuid\\r\\nfrom urllib.parse import urlparse\\r\\n\\r\\nimport pandas as pd\\r\\nfrom threading import Thread\\r\\n\\r\\nfrom selenium.webdriver.common.by import By\\r\\nfrom selenium.webdriver.chrome.service import Service\\r\\n# from tabulate import tabulate\\r\\nfrom selenium import webdriver\\r\\nfrom jinja2 import Template\\r\\nfrom webdriver_manager.chrome import ChromeDriverManager\\r\\n# from . import static\\r\\n#\\r\\n# from .config import root_folder, log_file_path, key, data_source_type\\r\\n# from .db_functions import get_db_connection\\r\\n\\r\\ntry:\\r\\n    import importlib.resources as pkg_resources\\r\\nexcept ImportError:\\r\\n    # Try backported to PY\\u003c37 `importlib_resources`.\\r\\n    import importlib_resources as pkg_resources\\r\\n\\r\\n\\r\\ndef login_and_get_cookies(driver, selenium_commands):\\r\\n    for sc in selenium_commands:\\r\\n        # time.sleep(2)\\r\\n        if sc[\\\"command\\\"] \\u003d\\u003d \\\"open\\\":\\r\\n            driver.get(sc[\\\"target\\\"])\\r\\n        elif sc[\\\"command\\\"] \\u003d\\u003d \\\"type\\\":\\r\\n            by, value \\u003d sc[\\\"target\\\"].split(\\\"\\u003d\\\", 1)\\r\\n            if by not in [\\\"id\\\", \\\"xpath\\\", \\\"link text\\\", \\\"partial link text\\\", \\\"name\\\", \\\"tag name\\\", \\\"class name\\\",\\r\\n                          \\\"css selector\\\"]:\\r\\n                raise Exception(f\\\"login commands target \\u0027{by}\\u0027 not a valid one\\\")\\r\\n            driver.find_element(by\\u003dby, value\\u003dvalue).send_keys(sc[\\\"value\\\"])\\r\\n        elif sc[\\\"command\\\"] \\u003d\\u003d \\\"clickAndWait\\\":\\r\\n            by, value \\u003d sc[\\\"target\\\"].split(\\\"\\u003d\\\", 1)\\r\\n            if by not in [\\\"id\\\", \\\"xpath\\\", \\\"link text\\\", \\\"partial link text\\\", \\\"name\\\", \\\"tag name\\\", \\\"class name\\\",\\r\\n                          \\\"css selector\\\"]:\\r\\n                raise Exception(f\\\"login commands target \\u0027{by}\\u0027 not a valid one\\\")\\r\\n            driver.find_element(by\\u003dby, value\\u003dvalue).click()\\r\\n        elif sc[\\\"command\\\"] \\u003d\\u003d \\\"verifyTitle\\\":\\r\\n            for _ in range(10):\\r\\n                title \\u003d driver.find_element(by\\u003dBy.XPATH, value\\u003d\\\"/html/head/title\\\").get_attribute(\\\"textContent\\\")\\r\\n                title \\u003d title.strip()\\r\\n                if title \\u003d\\u003d sc[\\\"target\\\"].strip():\\r\\n                    break\\r\\n                time.sleep(0.2)\\r\\n            else:\\r\\n                raise Exception(f\\\"sign in failed or home page title \\u0027{title}\\u0027 not matched\\\")\\r\\n        else:\\r\\n            raise Exception(\\\"given command is not in our list\\\")\\r\\n\\r\\n    cookies \\u003d driver.get_cookies()\\r\\n    return cookies\\r\\n\\r\\n\\r\\ndef closing_function(file_location, driver1):\\r\\n    try:\\r\\n        # time.sleep(60)\\r\\n        driver1.quit()\\r\\n    except Exception as e:\\r\\n        # print(e)\\r\\n        pass\\r\\n    try:\\r\\n        # pass\\r\\n        os.remove(file_location)\\r\\n    except Exception as e:\\r\\n        # print(e)\\r\\n        pass\\r\\n\\r\\n\\r\\ndef create_datasets_and_trigger_scala_methods(tableau_data, sheet_name_to_dataset_name, session_object,\\r\\n                                              component_name, dataflow_run_id, no_prints\\u003dTrue):\\r\\n    for k, v in tableau_data.items():\\r\\n        rdd \\u003d session_object.sparkContext.parallelize(v)\\r\\n        no_of_partitions \\u003d rdd.getNumPartitions()\\r\\n        df1 \\u003d session_object.read.json(rdd.map(lambda x: json.dumps(x)))\\r\\n        df1 \\u003d df1.toDF(*[re.sub(\\u0027[^0-9A-Za-z_]\\u0027, \\u0027_\\u0027, c) for c in df1.columns])\\r\\n        dataset_name \\u003d sheet_name_to_dataset_name[k]\\r\\n        df1.createOrReplaceTempView(dataset_name)\\r\\n        schema \\u003d [json.loads(i.json()) for i in df1.schema.fields]\\r\\n        schema \\u003d json.dumps({\\\"type\\\": \\\"struct\\\", \\\"fields\\\": schema})\\r\\n        sample_output \\u003d json.dumps(v[:100])\\r\\n        # with open(log_file_path, \\\"a\\\") as f:\\r\\n        #     f.write(\\r\\n        #         f\\\"datasetName \\u003d {dataset_name}\\\\n\\\\n schema \\u003d {schema}\\\\n\\\\n no_of_rows \\u003d {len(v)}\\\\n\\\\n no_of_partitions \\u003d {no_of_partitions}\\\\n\\\\n sample_output \\u003d {sample_output}\\\\n\\\\n component_name \\u003d {component_name}\\\\n\\\\n dataflow_run_id \\u003d {dataflow_run_id}\\\\n\\\\n\\\")\\r\\n\\r\\n        session_object.sparkContext._jvm.com.datagaps.core.engine.utils.CodeUtils.saveDatasetInfo(dataset_name,\\r\\n                                                                                                  schema,\\r\\n                                                                                                  len(v),\\r\\n                                                                                                  no_of_partitions,\\r\\n                                                                                                  dataflow_run_id,\\r\\n                                                                                                  sample_output,\\r\\n                                                                                                  component_name)\\r\\n\\r\\n        if not no_prints:\\r\\n            print(k)\\r\\n            df1.show(5)\\r\\n            print(\\\"\\\\n\\\\n\\\")\\r\\n\\r\\n\\r\\ndef get_tableau_data(bi_details, data_source_details):\\r\\n    print(\\\"hai\\\")\\r\\n    js_err \\u003d \\\"None\\\"\\r\\n    try:\\r\\n        bi_details \\u003d json.loads(bi_details)\\r\\n        data_source_details \\u003d json.loads(data_source_details)\\r\\n        path \\u003d bi_details[\\\"url\\\"].strip(\\\" /\\\")\\r\\n        cookies \\u003d bi_details[\\\"cookies\\\"]\\r\\n        view_title \\u003d bi_details[\\\"viewTitle\\\"]\\r\\n        work_sheets \\u003d bi_details[\\\"workSheets\\\"]\\r\\n        filters \\u003d bi_details[\\\"filters\\\"]\\r\\n        parameters \\u003d bi_details[\\\"parameters\\\"]\\r\\n        view_type \\u003d bi_details[\\\"viewType\\\"]\\r\\n\\r\\n        login_credentials \\u003d {i[\\\"key\\\"]: i[\\\"value\\\"] for i in data_source_details[\\\"optionsJson\\\"]}\\r\\n        username \\u003d login_credentials[\\\"userName\\\"]\\r\\n        password \\u003d login_credentials[\\\"password\\\"]\\r\\n        site_name \\u003d login_credentials[\\\"siteId\\\"].strip(\\\" /\\\")\\r\\n        host \\u003d \\\"{uri.scheme}://{uri.netloc}\\\".format(uri\\u003durlparse(login_credentials[\\\"url\\\"]))\\r\\n        if site_name:\\r\\n            view_url \\u003d host + \\\"/t/\\\" + site_name + \\\"/views/\\\" + path\\r\\n        else:\\r\\n            view_url \\u003d host + \\\"/views/\\\" + path\\r\\n\\r\\n        # print(username, password, view_url)\\r\\n        login_commands \\u003d data_source_details[\\\"additionalOptions\\\"]\\r\\n        for command in login_commands:\\r\\n            if command[\\\"value\\\"] \\u003d\\u003d \\u0027$[username]\\u0027:\\r\\n                command[\\\"value\\\"] \\u003d username\\r\\n            elif command[\\\"value\\\"] \\u003d\\u003d \\u0027$[password]\\u0027:\\r\\n                command[\\\"value\\\"] \\u003d password\\r\\n\\r\\n\\r\\n        sheet_name_to_dataset_name \\u003d {i[\\\"name\\\"]: i[\\\"datasetName\\\"] for i in work_sheets}\\r\\n        dataset_names \\u003d json.dumps([i[\\\"datasetName\\\"] for i in work_sheets])\\r\\n        work_sheet_names \\u003d json.dumps([i[\\\"name\\\"] for i in work_sheets])\\r\\n        view_title \\u003d view_title.strip()\\r\\n        categorical_filters \\u003d [i for i in filters if i[\\\"type\\\"] \\u003d\\u003d \\\"categorical\\\"]\\r\\n        non_categorical_filters \\u003d [i for i in filters if i[\\\"type\\\"] !\\u003d \\\"categorical\\\"]\\r\\n        # host \\u003d \\\"{uri.scheme}://{uri.netloc}\\\".format(uri\\u003durlparse(url))\\r\\n        js_lib \\u003d host + \\\"/javascripts/api/tableau-2.min.js\\\"\\r\\n\\r\\n        base_js_file \\u003d \\\"/home/datagaps/upendar/tableau_js_api.html\\\"\\r\\n        with open(base_js_file) as f:\\r\\n            html_content \\u003d f.read()\\r\\n        tm \\u003d Template(html_content)\\r\\n        formatted_html_content \\u003d tm.render(url\\u003dview_url, js_lib\\u003djs_lib, non_categorical_filters\\u003dnon_categorical_filters,\\r\\n                                           categorical_filters\\u003dcategorical_filters, parameters\\u003dparameters,\\r\\n                                           view_type\\u003dview_type, work_sheet_names\\u003dwork_sheet_names)\\r\\n\\r\\n        tableau_temp_files \\u003d \\\"/home/datagaps/upendar/\\\"\\r\\n        if not os.path.exists(tableau_temp_files):\\r\\n            os.makedirs(tableau_temp_files)\\r\\n        new_file_location \\u003d os.path.join(tableau_temp_files, f\\\"{str(uuid.uuid4())}.html\\\")\\r\\n\\r\\n        options \\u003d webdriver.ChromeOptions()\\r\\n        options.add_argument(\\u0027headless\\u0027)\\r\\n        driver \\u003d webdriver.Chrome(service\\u003dService(ChromeDriverManager().install()), options\\u003doptions)\\r\\n        try:\\r\\n            with open(new_file_location, \\\"w\\\") as f:\\r\\n                f.write(formatted_html_content)\\r\\n            del formatted_html_content\\r\\n            driver.set_window_size(1920, 1080)\\r\\n            driver.implicitly_wait(90)\\r\\n\\r\\n            driver.execute_cdp_cmd(\\u0027Network.enable\\u0027, {})\\r\\n\\r\\n            for cookie in cookies:\\r\\n                driver.execute_cdp_cmd(\\u0027Network.setCookie\\u0027, cookie)\\r\\n\\r\\n            driver.execute_cdp_cmd(\\u0027Network.disable\\u0027, {})\\r\\n\\r\\n            driver.get(\\\"file://\\\" + new_file_location)\\r\\n            # driver.fullscreen_window()\\r\\n            driver.switch_to.frame(driver.find_element(by\\u003dBy.XPATH, value\\u003d\\u0027//*[@id\\u003d\\\"vizContainer\\\"]/iframe\\u0027))\\r\\n            title \\u003d driver.find_element(by\\u003dBy.XPATH, value\\u003d\\\"/html/head/title\\\").get_attribute(\\\"textContent\\\")\\r\\n            title \\u003d title.strip()\\r\\n\\r\\n            if view_title !\\u003d title:  # if title \\u003d\\u003d \\\"Tableau Server Sign In\\\":\\r\\n                if login_commands:\\r\\n                    driver.delete_all_cookies()\\r\\n                    cookies \\u003d login_and_get_cookies(driver, login_commands)\\r\\n                    # print(\\\"new cookies\\\", cookies)\\r\\n                    driver.get(\\\"file://\\\" + new_file_location)\\r\\n\\r\\n                    driver.switch_to.frame(driver.find_element(by\\u003dBy.XPATH, value\\u003d\\u0027//*[@id\\u003d\\\"vizContainer\\\"]/iframe\\u0027))\\r\\n                    for _ in range(10):\\r\\n                        title \\u003d driver.find_element(by\\u003dBy.XPATH, value\\u003d\\\"/html/head/title\\\").get_attribute(\\\"textContent\\\")\\r\\n                        title \\u003d title.strip()\\r\\n                        if view_title \\u003d\\u003d title:\\r\\n                            break\\r\\n                        time.sleep(0.2)\\r\\n                    else:\\r\\n                        raise Exception(f\\\"sign in failed or view title \\u0027{title}\\u0027 not matched\\\")\\r\\n                else:\\r\\n                    raise Exception(f\\\"cookies expired or view title \\u0027{title}\\u0027 not matched\\\")\\r\\n            driver.implicitly_wait(180)\\r\\n            driver.switch_to.default_content()\\r\\n            js_err \\u003d driver.find_element(by\\u003d\\\"id\\\", value\\u003d\\\"dataInsertionDone\\\").get_attribute(\\\"textContent\\\")\\r\\n            tableau_data \\u003d driver.find_element(by\\u003d\\\"id\\\", value\\u003d\\\"dataTarget\\\").get_attribute(\\\"textContent\\\")\\r\\n            tableau_data \\u003d json.loads(tableau_data)\\r\\n\\r\\n\\r\\n        finally:\\r\\n\\r\\n            thread1 \\u003d Thread(target\\u003dclosing_function, args\\u003d(new_file_location, driver,))\\r\\n            thread1.start()\\r\\n        if tableau_data:\\r\\n\\r\\n            for k, v in tableau_data.items():\\r\\n                print(k)\\r\\n                df \\u003d pd.DataFrame(v)\\r\\n                print(df)\\r\\n\\r\\n        else:\\r\\n            raise Exception(\\\"Received empty data from tableau.\\\")\\r\\n    except Exception as e:\\r\\n        raise\\r\\n\\r\\n\\r\\n\\r\\nif True:\\r\\n    t1 \\u003d time.time()\\r\\n\\r\\n    get_tableau_data(r\\u0027\\u0027\\u0027{\\\"workSheets\\\":[{\\\"name\\\":\\\"S\\u0026P Returns by Decade\\\",\\\"datasetName\\\":\\\"S_P_Returns_by_Decade\\\"}],\\\"url\\\":\\\"Regional/Economy\\\",\\\"filters\\\":[],\\\"parameters\\\":[],\\\"cookies\\\":[],\\\"viewType\\\":\\\"dashboard\\\",\\\"viewTitle\\\":\\\"Workbook: Regional\\\"}\\u0027\\u0027\\u0027,\\r\\n                     r\\u0027\\u0027\\u0027{\\\"dataSourceId\\\":1660,\\\"dataSourceName\\\":\\\"upendar_tableau_dgvm95\\\",\\\"optionsJson\\\":[{\\\"key\\\":\\\"userName\\\",\\\"value\\\":\\\"admin\\\"},{\\\"key\\\":\\\"password\\\",\\\"value\\\":\\\"qProbe123\\\"},{\\\"key\\\":\\\"url\\\",\\\"value\\\":\\\"https://dgvm95.datagapsinc.in/#/signin\\\"},{\\\"key\\\":\\\"siteId\\\",\\\"value\\\":\\\"\\\"},{\\\"key\\\":\\\"version\\\",\\\"value\\\":3.15},{\\\"key\\\":\\\"loginType\\\",\\\"value\\\":\\\"auto\\\"}],\\\"additionalOptions\\\":[{\\\"command\\\":\\\"open\\\",\\\"target\\\":\\\"https://dgvm95.datagapsinc.in/#/signin\\\",\\\"value\\\":\\\"\\\"},{\\\"command\\\":\\\"type\\\",\\\"target\\\":\\\"name\\u003dusername\\\",\\\"value\\\":\\\"$[username]\\\"},{\\\"command\\\":\\\"type\\\",\\\"target\\\":\\\"name\\u003dpassword\\\",\\\"value\\\":\\\"$[password]\\\"},{\\\"command\\\":\\\"clickAndWait\\\",\\\"target\\\":\\\"xpath\\u003d//*[@tb-test-id\\u003d\\\\\\\"button-signin\\\\\\\"]\\\",\\\"value\\\":\\\"\\\"},{\\\"command\\\":\\\"verifyTitle\\\",\\\"target\\\":\\\"Home - Tableau Server\\\",\\\"value\\\":\\\"\\\"}]}\\u0027\\u0027\\u0027)\\r\\n    print(time.time() - t1)\",\"kind\":\"pyspark\",\"dataSourceId\":0,\"componentId\":10,\"componentName\":\"Code 10\",\"tableName\":\"\",\"category\":\"Processor\",\"componentType\":\"Code\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":50,\"dependencies\":[],\"options\":{},\"className\":\"com.datagaps.dataflow.models.CodeComponent\",\"excludeNotification\":\"N\"},{\"code\":\"import datetime\\r\\nimport json\\r\\nimport os\\r\\nimport re\\r\\n# import time\\r\\nimport time\\r\\nimport traceback\\r\\nimport uuid\\r\\nfrom urllib.parse import urlparse\\r\\n\\r\\nimport pandas as pd\\r\\nfrom threading import Thread\\r\\n\\r\\nfrom selenium.webdriver.common.by import By\\r\\nfrom selenium.webdriver.chrome.service import Service\\r\\n# from tabulate import tabulate\\r\\nfrom selenium import webdriver\\r\\nfrom jinja2 import Template\\r\\nfrom webdriver_manager.chrome import ChromeDriverManager\\r\\n# from . import static\\r\\n#\\r\\n# from .config import root_folder, log_file_path, key, data_source_type\\r\\n# from .db_functions import get_db_connection\\r\\n\\r\\ntry:\\r\\n    import importlib.resources as pkg_resources\\r\\nexcept ImportError:\\r\\n    # Try backported to PY\\u003c37 `importlib_resources`.\\r\\n    import importlib_resources as pkg_resources\\r\\n\\r\\n\\r\\ndef login_and_get_cookies(driver, selenium_commands):\\r\\n    for sc in selenium_commands:\\r\\n        # time.sleep(2)\\r\\n        if sc[\\\"command\\\"] \\u003d\\u003d \\\"open\\\":\\r\\n            driver.get(sc[\\\"target\\\"])\\r\\n        elif sc[\\\"command\\\"] \\u003d\\u003d \\\"type\\\":\\r\\n            by, value \\u003d sc[\\\"target\\\"].split(\\\"\\u003d\\\", 1)\\r\\n            if by not in [\\\"id\\\", \\\"xpath\\\", \\\"link text\\\", \\\"partial link text\\\", \\\"name\\\", \\\"tag name\\\", \\\"class name\\\",\\r\\n                          \\\"css selector\\\"]:\\r\\n                raise Exception(f\\\"login commands target \\u0027{by}\\u0027 not a valid one\\\")\\r\\n            driver.find_element(by\\u003dby, value\\u003dvalue).send_keys(sc[\\\"value\\\"])\\r\\n        elif sc[\\\"command\\\"] \\u003d\\u003d \\\"clickAndWait\\\":\\r\\n            by, value \\u003d sc[\\\"target\\\"].split(\\\"\\u003d\\\", 1)\\r\\n            if by not in [\\\"id\\\", \\\"xpath\\\", \\\"link text\\\", \\\"partial link text\\\", \\\"name\\\", \\\"tag name\\\", \\\"class name\\\",\\r\\n                          \\\"css selector\\\"]:\\r\\n                raise Exception(f\\\"login commands target \\u0027{by}\\u0027 not a valid one\\\")\\r\\n            driver.find_element(by\\u003dby, value\\u003dvalue).click()\\r\\n        elif sc[\\\"command\\\"] \\u003d\\u003d \\\"verifyTitle\\\":\\r\\n            for _ in range(10):\\r\\n                title \\u003d driver.find_element(by\\u003dBy.XPATH, value\\u003d\\\"/html/head/title\\\").get_attribute(\\\"textContent\\\")\\r\\n                title \\u003d title.strip()\\r\\n                if title \\u003d\\u003d sc[\\\"target\\\"].strip():\\r\\n                    break\\r\\n                time.sleep(0.2)\\r\\n            else:\\r\\n                raise Exception(f\\\"sign in failed or home page title \\u0027{title}\\u0027 not matched\\\")\\r\\n        else:\\r\\n            raise Exception(\\\"given command is not in our list\\\")\\r\\n\\r\\n    cookies \\u003d driver.get_cookies()\\r\\n    return cookies\\r\\n\\r\\n\\r\\ndef closing_function(file_location, driver1):\\r\\n    try:\\r\\n        # time.sleep(60)\\r\\n        driver1.quit()\\r\\n    except Exception as e:\\r\\n        # print(e)\\r\\n        pass\\r\\n    try:\\r\\n        # pass\\r\\n        os.remove(file_location)\\r\\n    except Exception as e:\\r\\n        # print(e)\\r\\n        pass\\r\\n\\r\\n\\r\\ndef create_datasets_and_trigger_scala_methods(tableau_data, sheet_name_to_dataset_name, session_object,\\r\\n                                              component_name, dataflow_run_id, no_prints\\u003dTrue):\\r\\n    for k, v in tableau_data.items():\\r\\n        rdd \\u003d session_object.sparkContext.parallelize(v)\\r\\n        no_of_partitions \\u003d rdd.getNumPartitions()\\r\\n        df1 \\u003d session_object.read.json(rdd.map(lambda x: json.dumps(x)))\\r\\n        df1 \\u003d df1.toDF(*[re.sub(\\u0027[^0-9A-Za-z_]\\u0027, \\u0027_\\u0027, c) for c in df1.columns])\\r\\n        dataset_name \\u003d sheet_name_to_dataset_name[k]\\r\\n        df1.createOrReplaceTempView(dataset_name)\\r\\n        schema \\u003d [json.loads(i.json()) for i in df1.schema.fields]\\r\\n        schema \\u003d json.dumps({\\\"type\\\": \\\"struct\\\", \\\"fields\\\": schema})\\r\\n        sample_output \\u003d json.dumps(v[:100])\\r\\n        # with open(log_file_path, \\\"a\\\") as f:\\r\\n        #     f.write(\\r\\n        #         f\\\"datasetName \\u003d {dataset_name}\\\\n\\\\n schema \\u003d {schema}\\\\n\\\\n no_of_rows \\u003d {len(v)}\\\\n\\\\n no_of_partitions \\u003d {no_of_partitions}\\\\n\\\\n sample_output \\u003d {sample_output}\\\\n\\\\n component_name \\u003d {component_name}\\\\n\\\\n dataflow_run_id \\u003d {dataflow_run_id}\\\\n\\\\n\\\")\\r\\n\\r\\n        session_object.sparkContext._jvm.com.datagaps.core.engine.utils.CodeUtils.saveDatasetInfo(dataset_name,\\r\\n                                                                                                  schema,\\r\\n                                                                                                  len(v),\\r\\n                                                                                                  no_of_partitions,\\r\\n                                                                                                  dataflow_run_id,\\r\\n                                                                                                  sample_output,\\r\\n                                                                                                  component_name)\\r\\n\\r\\n        if not no_prints:\\r\\n            print(k)\\r\\n            df1.show(5)\\r\\n            print(\\\"\\\\n\\\\n\\\")\\r\\n\\r\\n\\r\\ndef get_tableau_data(bi_details, data_source_details):\\r\\n    print(\\\"hai\\\")\\r\\n    js_err \\u003d \\\"None\\\"\\r\\n    try:\\r\\n        bi_details \\u003d json.loads(bi_details)\\r\\n        data_source_details \\u003d json.loads(data_source_details)\\r\\n        path \\u003d bi_details[\\\"url\\\"].strip(\\\" /\\\")\\r\\n        cookies \\u003d bi_details[\\\"cookies\\\"]\\r\\n        view_title \\u003d bi_details[\\\"viewTitle\\\"]\\r\\n        work_sheets \\u003d bi_details[\\\"workSheets\\\"]\\r\\n        filters \\u003d bi_details[\\\"filters\\\"]\\r\\n        parameters \\u003d bi_details[\\\"parameters\\\"]\\r\\n        view_type \\u003d bi_details[\\\"viewType\\\"]\\r\\n\\r\\n        login_credentials \\u003d {i[\\\"key\\\"]: i[\\\"value\\\"] for i in data_source_details[\\\"optionsJson\\\"]}\\r\\n        username \\u003d login_credentials[\\\"userName\\\"]\\r\\n        password \\u003d login_credentials[\\\"password\\\"]\\r\\n        site_name \\u003d login_credentials[\\\"siteId\\\"].strip(\\\" /\\\")\\r\\n        host \\u003d \\\"{uri.scheme}://{uri.netloc}\\\".format(uri\\u003durlparse(login_credentials[\\\"url\\\"]))\\r\\n        if site_name:\\r\\n            view_url \\u003d host + \\\"/t/\\\" + site_name + \\\"/views/\\\" + path\\r\\n        else:\\r\\n            view_url \\u003d host + \\\"/views/\\\" + path\\r\\n\\r\\n        # print(username, password, view_url)\\r\\n        login_commands \\u003d data_source_details[\\\"additionalOptions\\\"]\\r\\n        for command in login_commands:\\r\\n            if command[\\\"value\\\"] \\u003d\\u003d \\u0027$[username]\\u0027:\\r\\n                command[\\\"value\\\"] \\u003d username\\r\\n            elif command[\\\"value\\\"] \\u003d\\u003d \\u0027$[password]\\u0027:\\r\\n                command[\\\"value\\\"] \\u003d password\\r\\n\\r\\n\\r\\n        sheet_name_to_dataset_name \\u003d {i[\\\"name\\\"]: i[\\\"datasetName\\\"] for i in work_sheets}\\r\\n        dataset_names \\u003d json.dumps([i[\\\"datasetName\\\"] for i in work_sheets])\\r\\n        work_sheet_names \\u003d json.dumps([i[\\\"name\\\"] for i in work_sheets])\\r\\n        view_title \\u003d view_title.strip()\\r\\n        categorical_filters \\u003d [i for i in filters if i[\\\"type\\\"] \\u003d\\u003d \\\"categorical\\\"]\\r\\n        non_categorical_filters \\u003d [i for i in filters if i[\\\"type\\\"] !\\u003d \\\"categorical\\\"]\\r\\n        # host \\u003d \\\"{uri.scheme}://{uri.netloc}\\\".format(uri\\u003durlparse(url))\\r\\n        js_lib \\u003d host + \\\"/javascripts/api/tableau-2.min.js\\\"\\r\\n\\r\\n        base_js_file \\u003d \\\"/home/datagaps/upendar/tableau_js_api.html\\\"\\r\\n        with open(base_js_file) as f:\\r\\n            html_content \\u003d f.read()\\r\\n        tm \\u003d Template(html_content)\\r\\n        formatted_html_content \\u003d tm.render(url\\u003dview_url, js_lib\\u003djs_lib, non_categorical_filters\\u003dnon_categorical_filters,\\r\\n                                           categorical_filters\\u003dcategorical_filters, parameters\\u003dparameters,\\r\\n                                           view_type\\u003dview_type, work_sheet_names\\u003dwork_sheet_names)\\r\\n\\r\\n        tableau_temp_files \\u003d \\\"/home/datagaps/upendar/\\\"\\r\\n        if not os.path.exists(tableau_temp_files):\\r\\n            os.makedirs(tableau_temp_files)\\r\\n        new_file_location \\u003d os.path.join(tableau_temp_files, f\\\"{str(uuid.uuid4())}.html\\\")\\r\\n\\r\\n        options \\u003d webdriver.ChromeOptions()\\r\\n        options.add_argument(\\u0027headless\\u0027)\\r\\n        driver \\u003d webdriver.Chrome(service\\u003dService(ChromeDriverManager().install()), options\\u003doptions)\\r\\n        try:\\r\\n            with open(new_file_location, \\\"w\\\") as f:\\r\\n                f.write(formatted_html_content)\\r\\n            del formatted_html_content\\r\\n            driver.set_window_size(1920, 1080)\\r\\n            driver.implicitly_wait(90)\\r\\n\\r\\n            driver.execute_cdp_cmd(\\u0027Network.enable\\u0027, {})\\r\\n\\r\\n            for cookie in cookies:\\r\\n                driver.execute_cdp_cmd(\\u0027Network.setCookie\\u0027, cookie)\\r\\n\\r\\n            driver.execute_cdp_cmd(\\u0027Network.disable\\u0027, {})\\r\\n            new_file_location \\u003d \\\"/home/datagaps/upendar/1c89046d-7e3d-4b46-992b-16e90881a563.html\\\"\\r\\n            driver.get(\\\"file://\\\" + new_file_location)\\r\\n            # driver.fullscreen_window()\\r\\n            driver.switch_to.frame(driver.find_element(by\\u003dBy.XPATH, value\\u003d\\u0027//*[@id\\u003d\\\"vizContainer\\\"]/iframe\\u0027))\\r\\n            title \\u003d driver.find_element(by\\u003dBy.XPATH, value\\u003d\\\"/html/head/title\\\").get_attribute(\\\"textContent\\\")\\r\\n            title \\u003d title.strip()\\r\\n\\r\\n            if view_title !\\u003d title:  # if title \\u003d\\u003d \\\"Tableau Server Sign In\\\":\\r\\n                if login_commands:\\r\\n                    driver.delete_all_cookies()\\r\\n                    cookies \\u003d login_and_get_cookies(driver, login_commands)\\r\\n                    # print(\\\"new cookies\\\", cookies)\\r\\n                    driver.get(\\\"file://\\\" + new_file_location)\\r\\n\\r\\n                    driver.switch_to.frame(driver.find_element(by\\u003dBy.XPATH, value\\u003d\\u0027//*[@id\\u003d\\\"vizContainer\\\"]/iframe\\u0027))\\r\\n                    for _ in range(10):\\r\\n                        title \\u003d driver.find_element(by\\u003dBy.XPATH, value\\u003d\\\"/html/head/title\\\").get_attribute(\\\"textContent\\\")\\r\\n                        title \\u003d title.strip()\\r\\n                        if view_title \\u003d\\u003d title:\\r\\n                            break\\r\\n                        time.sleep(0.2)\\r\\n                    else:\\r\\n                        raise Exception(f\\\"sign in failed or view title \\u0027{title}\\u0027 not matched\\\")\\r\\n                else:\\r\\n                    raise Exception(f\\\"cookies expired or view title \\u0027{title}\\u0027 not matched\\\")\\r\\n            driver.implicitly_wait(180)\\r\\n            driver.switch_to.default_content()\\r\\n            js_err \\u003d driver.find_element(by\\u003d\\\"id\\\", value\\u003d\\\"dataInsertionDone\\\").get_attribute(\\\"textContent\\\")\\r\\n            tableau_data \\u003d driver.find_element(by\\u003d\\\"id\\\", value\\u003d\\\"dataTarget\\\").get_attribute(\\\"textContent\\\")\\r\\n            tableau_data \\u003d json.loads(tableau_data)\\r\\n\\r\\n\\r\\n        finally:\\r\\n\\r\\n            thread1 \\u003d Thread(target\\u003dclosing_function, args\\u003d(new_file_location, driver,))\\r\\n            thread1.start()\\r\\n        if tableau_data:\\r\\n\\r\\n            for k, v in tableau_data.items():\\r\\n                print(k)\\r\\n                df \\u003d pd.DataFrame(v)\\r\\n                print(df)\\r\\n\\r\\n        else:\\r\\n            raise Exception(\\\"Received empty data from tableau.\\\")\\r\\n    except Exception as e:\\r\\n        raise\\r\\n\\r\\n\\r\\n\\r\\nif True:\\r\\n    t1 \\u003d time.time()\\r\\n\\r\\n    get_tableau_data(r\\u0027\\u0027\\u0027{\\\"workSheets\\\":[{\\\"name\\\":\\\"S\\u0026P Returns by Decade\\\",\\\"datasetName\\\":\\\"S_P_Returns_by_Decade\\\"}],\\\"url\\\":\\\"Regional/Economy\\\",\\\"filters\\\":[],\\\"parameters\\\":[],\\\"cookies\\\":[],\\\"viewType\\\":\\\"dashboard\\\",\\\"viewTitle\\\":\\\"Workbook: Regional\\\"}\\u0027\\u0027\\u0027,\\r\\n                     r\\u0027\\u0027\\u0027{\\\"dataSourceId\\\":1660,\\\"dataSourceName\\\":\\\"upendar_tableau_dgvm95\\\",\\\"optionsJson\\\":[{\\\"key\\\":\\\"userName\\\",\\\"value\\\":\\\"admin\\\"},{\\\"key\\\":\\\"password\\\",\\\"value\\\":\\\"qProbe123\\\"},{\\\"key\\\":\\\"url\\\",\\\"value\\\":\\\"https://dgvm95.datagapsinc.in/#/signin\\\"},{\\\"key\\\":\\\"siteId\\\",\\\"value\\\":\\\"\\\"},{\\\"key\\\":\\\"version\\\",\\\"value\\\":3.15},{\\\"key\\\":\\\"loginType\\\",\\\"value\\\":\\\"auto\\\"}],\\\"additionalOptions\\\":[{\\\"command\\\":\\\"open\\\",\\\"target\\\":\\\"https://dgvm95.datagapsinc.in/#/signin\\\",\\\"value\\\":\\\"\\\"},{\\\"command\\\":\\\"type\\\",\\\"target\\\":\\\"name\\u003dusername\\\",\\\"value\\\":\\\"$[username]\\\"},{\\\"command\\\":\\\"type\\\",\\\"target\\\":\\\"name\\u003dpassword\\\",\\\"value\\\":\\\"$[password]\\\"},{\\\"command\\\":\\\"clickAndWait\\\",\\\"target\\\":\\\"xpath\\u003d//*[@tb-test-id\\u003d\\\\\\\"button-signin\\\\\\\"]\\\",\\\"value\\\":\\\"\\\"},{\\\"command\\\":\\\"verifyTitle\\\",\\\"target\\\":\\\"Home - Tableau Server\\\",\\\"value\\\":\\\"\\\"}]}\\u0027\\u0027\\u0027)\\r\\n    print(time.time() - t1)\",\"kind\":\"pyspark\",\"dataSourceId\":0,\"componentId\":11,\"componentName\":\"Code 11\",\"tableName\":\"\",\"category\":\"Processor\",\"componentType\":\"Code\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":50,\"dependencies\":[],\"options\":{},\"className\":\"com.datagaps.dataflow.models.CodeComponent\",\"excludeNotification\":\"N\"},{\"code\":\"from selenium.webdriver.common.by import By\\r\\nfrom selenium.webdriver.chrome.service import Service\\r\\n# from tabulate import tabulate\\r\\nfrom selenium import webdriver\\r\\nfrom jinja2 import Template\\r\\nfrom webdriver_manager.chrome import ChromeDriverManager\\r\\n\\r\\n\\r\\noptions \\u003d webdriver.ChromeOptions()\\r\\noptions.add_argument(\\u0027headless\\u0027)\\r\\ndriver \\u003d webdriver.Chrome(service\\u003dService(ChromeDriverManager().install()), options\\u003doptions)\\r\\ntry:\\r\\n    \\r\\n    driver.set_window_size(1920, 1080)\\r\\n    driver.implicitly_wait(10)\\r\\n    \\r\\n    # driver.execute_cdp_cmd(\\u0027Network.enable\\u0027, {})\\r\\n    \\r\\n    # for cookie in cookies:\\r\\n    #     driver.execute_cdp_cmd(\\u0027Network.setCookie\\u0027, cookie)\\r\\n    \\r\\n    # driver.execute_cdp_cmd(\\u0027Network.disable\\u0027, {})\\r\\n    new_file_location \\u003d \\\"/home/datagaps/upendar/059f860c-95c4-4546-a0cf-9c36c1a45abf.html\\\"\\r\\n    driver.get(\\\"file://\\\" + new_file_location)\\r\\n    # driver.fullscreen_window()\\r\\n    driver.switch_to.frame(driver.find_element(by\\u003dBy.XPATH, value\\u003d\\u0027//*[@id\\u003d\\\"vizContainer\\\"]/iframe\\u0027))\\r\\n    title \\u003d driver.find_element(by\\u003dBy.XPATH, value\\u003d\\\"/html/head/title\\\").get_attribute(\\\"textContent\\\")\\r\\n    title \\u003d title.strip()\\r\\n    print(title)\\r\\n    \\r\\nexcept:\\r\\n    driver.quit()\\r\\n    raise\",\"kind\":\"pyspark\",\"dataSourceId\":0,\"componentId\":12,\"componentName\":\"Code 12\",\"tableName\":\"\",\"category\":\"Processor\",\"componentType\":\"Code\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":50,\"dependencies\":[],\"options\":{},\"className\":\"com.datagaps.dataflow.models.CodeComponent\",\"excludeNotification\":\"N\"},{\"sourceDataFrame\":\"City_Sales\",\"targetDataFrame\":\"Obesity_Map\",\"mapping\":[{\"sourceColumn\":\"City\",\"sourceType\":\"string\",\"targetColumn\":\"Above_or_Below_\",\"targetType\":\"string\",\"unique\":\"N\",\"sourceDataFormat\":\"\",\"targetDataFormat\":\"\",\"sourceTypeChange\":\"N\",\"targetTypeChange\":\"N\",\"originalSourceType\":\"string\",\"orginalTargetType\":\"string\"},{\"sourceColumn\":\"Postal_Code\",\"sourceType\":\"string\",\"targetColumn\":\"Adult_Obesity____of_pop_\",\"targetType\":\"string\",\"unique\":\"N\",\"sourceDataFormat\":\"\",\"targetDataFormat\":\"\",\"sourceTypeChange\":\"N\",\"targetTypeChange\":\"N\",\"originalSourceType\":\"string\",\"orginalTargetType\":\"string\"},{\"sourceColumn\":\"Sales\",\"sourceType\":\"string\",\"targetColumn\":\"Adult_Smokers____of_pop_\",\"targetType\":\"string\",\"unique\":\"N\",\"sourceDataFormat\":\"\",\"targetDataFormat\":\"\",\"sourceTypeChange\":\"N\",\"targetTypeChange\":\"N\",\"originalSourceType\":\"string\",\"orginalTargetType\":\"string\"},{\"sourceColumn\":\"State\",\"sourceType\":\"string\",\"targetColumn\":\"County\",\"targetType\":\"string\",\"unique\":\"N\",\"sourceDataFormat\":\"\",\"targetDataFormat\":\"\",\"sourceTypeChange\":\"N\",\"targetTypeChange\":\"N\",\"originalSourceType\":\"string\",\"orginalTargetType\":\"string\"}],\"onlyInA\":\"Y\",\"onlyInB\":\"Y\",\"difference\":\"Y\",\"enableTrim\":\"N\",\"replaceNull\":\"N\",\"autoDataTypeConversion\":\"N\",\"columnDifferencesCount\":\"N\",\"ignoreCase\":\"N\",\"hasDuplicates\":\"N\",\"subDataFrames\":[{\"subDataFrameName\":\"_Source_Duplicate\",\"type\":\"Duplicates In A\"},{\"subDataFrameName\":\"_Target_Duplicate\",\"type\":\"Duplicates In B\"},{\"subDataFrameName\":\"_Matched\",\"type\":\"Matched\"},{\"subDataFrameName\":\"_OnlySource\",\"type\":\"Only In A\"},{\"subDataFrameName\":\"_OnlyTarget\",\"type\":\"Only In B\"},{\"subDataFrameName\":\"_Difference\",\"type\":\"Difference\"}],\"onlyInAThresholdUnit\":\"number\",\"onlyInAThreshold\":0.0,\"onlyInBThresholdUnit\":\"number\",\"onlyInBThreshold\":0.0,\"differencesSourceThresholdUnit\":\"number\",\"differencesSourceThreshold\":0.0,\"differencesTargetThresholdUnit\":\"number\",\"differencesTargetThreshold\":0.0,\"componentId\":9,\"componentName\":\"Data Compare 9\",\"tableName\":\"Data_Compare_9\",\"category\":\"Data Quality\",\"componentType\":\"Data Compare\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":50,\"dependencies\":[7],\"options\":{},\"className\":\"com.datagaps.dataflow.models.DataCompareComponent\",\"isCheckpointEnabled\":\"N\",\"excludeNotification\":\"N\"}],\"isDeleteWorkSchemaTable\":\"N\"}","parameters":"[{\"name\":\"limit_rows\",\"defValueInInteractiveMode\":\"limit 10\",\"defValueInBatchMode\":\"limit 1000\"}]","version":3,"maxComponentId":12,"livyOptions":"{\"proxyUser\":\"\",\"jars\":[],\"pyFiles\":[],\"files\":[],\"driverMemory\":\"\",\"driverCores\":0,\"executorMemory\":\"\",\"executorCores\":0,\"numExecutors\":0,\"archives\":[],\"queue\":\"\",\"name\":\"\",\"conf\":{},\"heartbeatTimeoutInSecond\":0,\"kind\":\"spark\"}","isDeleted":"N","userName":null,"type":"dataflow","environmentName":"","folderPath":"Dataflow/upendar","workSchemaName":null},"analysis":[],"datamodels":[],"tagDetails":[],"dataCompares":[]}
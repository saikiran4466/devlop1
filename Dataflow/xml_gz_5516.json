{"dataflow":{"dfKey":"6dc98832-8bd4-44fc-8d18-8d0c858e7dee","name":"xml_gz_5516","tags":null,"description":null,"definition":"{\"name\":\"xml_gz_5516\",\"version\":0,\"parameters\":\"[{\\\"name\\\":\\\"limit_rows\\\",\\\"defValueInInteractiveMode\\\":\\\"limit 10\\\",\\\"defValueInBatchMode\\\":\\\"limit 1000\\\"}]\",\"livyServerId\":0,\"components\":[{\"udfNames\":[],\"componentId\":0,\"componentName\":\"startComponent\",\"tableName\":\"\",\"category\":\"Start\",\"componentType\":\"UDF\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":0,\"dependencies\":[],\"className\":\"com.datagaps.dataflow.models.UDFComponent\",\"excludeNotification\":\"N\"},{\"code\":\"import boto3\\nimport gzip \\nfrom io import BytesIO\\nimport json\\nimport xmltodict\\nimport pandas as pd\\nimport copy\\n\\n\\ndef flatten(d, parent\\u003dNone):\\n    fd \\u003d {}\\n    for k, v in d.items():\\n        if parent:\\n            pre_fix \\u003d parent + \\\"_\\\" + k\\n        else:\\n            pre_fix \\u003d k\\n        if isinstance(v, dict):\\n            fd.update(flatten(v, pre_fix))\\n        else:\\n            fd[pre_fix] \\u003d v\\n\\n    return fd\\n\\n\\ndef unwind(d):\\n    recheck \\u003d False\\n    l \\u003d []\\n    for k, v in d.items():\\n        if isinstance(v, list):\\n            if v:\\n                l.extend([{**copy.deepcopy(d), k: _} for _ in v])\\n            else:\\n                l.append({**copy.deepcopy(d), k: v})\\n            recheck \\u003d True\\n            break\\n    else:\\n        return [d]\\n    if recheck:\\n        if len(l) \\u003e 1:\\n            for i in range(len(l)):\\n                l.extend(unwind(l.pop(0)))\\n    return l\\n\\n\\ndef final_1(dorl):\\n    if isinstance(dorl, dict):\\n        s \\u003d flatten(dorl)\\n        res_unwind \\u003d unwind(s)\\n        if res_unwind \\u003d\\u003d [dorl]:\\n            return res_unwind\\n        else:\\n            res_unwind \\u003d final_1(res_unwind)\\n    else:\\n        res_unwind \\u003d []\\n        for dl in dorl:\\n            res_unwind.extend(final_1(dl))\\n    return res_unwind\\n\\n\\ns3client \\u003d boto3.client(\\n    \\u0027s3\\u0027,\\n    region_name\\u003d\\u0027us-east-2\\u0027\\n)\\n \\n# These define the bucket and object to read\\nbucketname \\u003d \\\"datagapsdev\\\" \\n#s3://datagapstestdataohio/Provider_Test.XML\\nfile_to_read \\u003d \\\"data/test_xml2.xml.gz\\\"\\n\\n#Create a file object using the bucket and object key. \\nobj \\u003d s3client.get_object(\\n    Bucket \\u003d bucketname,\\n    Key\\u003dfile_to_read\\n    ) \\n# open the file object and read it into the variable filedata. \\n#filedata \\u003d fileobj[\\u0027Body\\u0027].read()\\nmycontentzip \\u003d gzip.GzipFile(fileobj\\u003dBytesIO(obj[\\u0027Body\\u0027].read())).read()\\n# file data will be a binary stream.  We have to decode it \\n#contents \\u003d filedata.decode(\\u0027utf-8\\u0027) \\n\\n# Once decoded, you can treat the file as plain text if appropriate \\n#print(mycontentzip)\\n\\njson_list \\u003d xmltodict.parse(mycontentzip)\\nfinal_res \\u003d final_1(json_list)\\nprint(final_res)\\nfinal_df \\u003d pd.DataFrame(final_res)\\nspark.createDataFrame(final_df.astype(str)).createOrReplaceTempView(\\u0027test2\\u0027)\\nprint(final_df.head())\",\"kind\":\"pyspark\",\"dataSourceId\":0,\"componentId\":1,\"componentName\":\"Code 1\",\"tableName\":\"\",\"category\":\"Processor\",\"componentType\":\"Code\",\"rank\":0,\"dataSourceName\":\"\",\"displayRows\":10,\"dependencies\":[],\"options\":{},\"className\":\"com.datagaps.dataflow.models.CodeComponent\",\"excludeNotification\":\"N\"}],\"isDeleteWorkSchemaTable\":\"N\"}","parameters":"[{\"name\":\"limit_rows\",\"defValueInInteractiveMode\":\"limit 10\",\"defValueInBatchMode\":\"limit 1000\"}]","version":3,"maxComponentId":1,"livyOptions":"{\"kind\":\"spark\",\"proxyUser\":\"\",\"jars\":[],\"pyFiles\":[],\"files\":[],\"driverMemory\":\"\",\"driverCores\":1,\"executorMemory\":\"\",\"executorCores\":2,\"numExecutors\":4,\"archives\":[],\"queue\":\"\",\"name\":null,\"conf\":{},\"heartbeatTimeoutInSecond\":0}","isDeleted":"N","userName":null,"type":"dataflow","environmentName":null,"folderPath":"Dataflow","workSchemaName":null},"analysis":[],"datamodels":[],"tagDetails":[],"dataCompares":[]}